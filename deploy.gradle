/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

if (project.hasProperty('release') && jdkVersion != '8') {
  throw new GradleException("Releases must be built with Java 8")
}

buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    classpath 'com.github.johnrengelman:shadow:8.1.1'
  }
}

subprojects {
  if (it.name == 'iceberg-open-api') {
    // don't publish iceberg-open-api
    return
  }

  apply plugin: 'maven-publish'
  apply plugin: 'com.apple.rio.binary'

  // using custom tasks
  sourcesJar.enabled = false
  javadocJar.enabled = false

  afterEvaluate {

    task sourceJar(type: Jar, dependsOn: classes) {
      if (project.hasProperty('riorelease')) {
        version = project.version.toString().replace("-SNAPSHOT", "")
      }
      archiveClassifier.set('sources')
      from sourceSets.main.allSource
      group 'build'
    }

    task testJar(type: Jar) {
      if (project.hasProperty('riorelease')) {
        version = project.version.toString().replace("-SNAPSHOT", "")
      }
      archiveClassifier.set('tests')
      from sourceSets.test.output
    }

    task testShadowJar(type: ShadowJar) {
      if (project.hasProperty('riorelease')) {
        version = project.version.toString().replace("-SNAPSHOT", "")
      }
      zip64 = true
      archiveClassifier.set('shadow-tests')
      from sourceSets.main.output, sourceSets.test.output
      configurations = [project.configurations.testRuntimeClasspath]

      // Note: Relocate dependencies as :iceberg-spark:iceberg-spark-3.4 does.
      // When we run Iceberg tests in Spark, some tests refer to shaded classes
      // in Iceberg Spark subproject and cause conflict. We shade same classes
      // in the shaded test jar to resolve it.
      relocate 'com.google', 'org.apache.iceberg.shaded.com.google'
      relocate 'com.fasterxml', 'org.apache.iceberg.shaded.com.fasterxml'
      relocate 'com.github.benmanes', 'org.apache.iceberg.shaded.com.github.benmanes'
      relocate 'org.checkerframework', 'org.apache.iceberg.shaded.org.checkerframework'
      relocate 'org.apache.avro', 'org.apache.iceberg.shaded.org.apache.avro'
      relocate 'avro.shaded', 'org.apache.iceberg.shaded.org.apache.avro.shaded'
      relocate 'com.thoughtworks.paranamer', 'org.apache.iceberg.shaded.com.thoughtworks.paranamer'
      relocate 'org.apache.parquet', 'org.apache.iceberg.shaded.org.apache.parquet'
      relocate 'shaded.parquet', 'org.apache.iceberg.shaded.org.apache.parquet.shaded'
      relocate 'org.apache.orc', 'org.apache.iceberg.shaded.org.apache.orc'
      relocate 'io.airlift', 'org.apache.iceberg.shaded.io.airlift'
      relocate 'org.apache.httpcomponents.client5', 'org.apache.iceberg.shaded.org.apache.httpcomponents.client5'
      // relocate Arrow and related deps to shade Iceberg specific version
      relocate 'io.netty', 'org.apache.iceberg.shaded.io.netty'
      relocate 'org.apache.arrow', 'org.apache.iceberg.shaded.org.apache.arrow'
      relocate 'com.carrotsearch', 'org.apache.iceberg.shaded.com.carrotsearch'
      relocate 'org.threeten.extra', 'org.apache.iceberg.shaded.org.threeten.extra'
      relocate 'org.roaringbitmap', 'org.apache.iceberg.shaded.org.roaringbitmap'

      minimize {
        // We need to exclude jar signatures when shading test-jars. Otherwise
        // when Java reads that JAR, it verifies the signature and sees it being
        // not valid.
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
      }
    }

    artifacts {
      archives sourceJar
      archives javadocJar
      archives testJar
      archives testShadowJar
      testArtifacts testJar
    }

    // add LICENSE and NOTICE
    [jar, sourceJar, javadocJar, testJar].each { task ->
      task.dependsOn rootProject.tasks.buildInfo
      task.from("${rootDir}/build") {
        include 'iceberg-build.properties'
      }
      task.from(rootDir) {
        include 'LICENSE'
        include 'NOTICE'
      }
    }

    publishing {
      publications {
        apache(MavenPublication) {
          if (project.hasProperty('riorelease')) {
            version = project.version.toString().replace("-SNAPSHOT", "")
          }

          if (tasks.matching({task -> task.name == 'shadowJar'}).isEmpty()) {
            from components.java
          } else {
            project.shadow.component(it)
          }

          artifact sourceJar
          artifact javadocJar
          artifact testJar
          artifact testShadowJar

          versionMapping {
            allVariants {
              fromResolutionResult()
            }
          }

          groupId = 'org.apache.iceberg'
          pom {
            name = 'Apache Iceberg'
            description = 'A table format for huge analytic datasets'
            url = 'https://iceberg.apache.org'
            licenses {
              license {
                name = 'The Apache Software License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              }
            }
            mailingLists {
              mailingList {
                name = 'Dev Mailing List'
                post = 'dev@iceberg.apache.org'
                subscribe = 'dev-subscribe@iceberg.apache.org'
                unsubscribe = 'dev-unsubscribe@iceberg.apache.org'
              }
            }
            issueManagement {
              system = 'GitHub'
              url = 'https://github.com/apache/iceberg/issues'
            }
          }
        }
      }
    }

    [jar, sourceJar, javadocJar, testJar].each { task ->
      tasks.generateMetadataFileForApachePublication.dependsOn task
      tasks.generatePomFileForApachePublication.dependsOn task
    }
  }
}
